
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}

// ENUMS
enum Role {
  ADMIN
  USER
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContactStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED
}

enum ExpType {
  FULLTIME
  PARTTIME
  FREELANCE
  INTERNSHIP
  CONTRACT
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// USER
model User {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String
  name        String
  role        Role        @default(USER)
  title       String?
  subtitle    String?
  bio         String?     @db.Text
  avatarUrl      String?
  location    String?
  website     String?
  linkedin    String?
  github      String?
  twitter     String?
  phone       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  resumeUrl   String?

  // Relations
  projects    Project[]
  experiences Experience[]
  educations  Education[]
  blogPosts   BlogPost[]
  contacts    Contact[]
  Skills      Skill[]
}

// CATEGORY
model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  slug        String      @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  projects    Project[]
  skills      Skill[]
}

// PROJECT
model Project {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  description String      @db.Text
  shortDesc   String?     @db.VarChar(255)
  content     String?     @db.Text
  status      ProjectStatus @default(PUBLISHED)
  featured    Boolean     @default(false)
  priority    Int         @default(0)
  liveUrl     String?
  githubUrl   String?
  figmaUrl    String?
  image       String?
  gallery     String?     @db.Text
  technologies String?    @db.Text
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
}

// SKILL
model Skill {
  id          String      @id @default(uuid())
  name        String
  level       SkillLevel  @default(INTERMEDIATE)
  yearsExp    Int?
  description String?
  icon        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
}

// EXPERIENCE
model Experience {
  id          String      @id @default(uuid())
  title       String
  company     String
  location    String?
  description String?     @db.Text
  technologies String?    @db.Text
  type        ExpType     @default(FULLTIME)
  startDate   DateTime
  endDate     DateTime?
  current     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
 }

// EDUCATION
model Education {
  id          String      @id @default(uuid())
  degree      String
  school      String
  field       String?
  location    String?
  description String?     @db.Text
  grade       String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  }

// BLOGPOST
model BlogPost {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique
  excerpt     String?     @db.VarChar(255)
  content     String      @db.Text
  status      PostStatus  @default(DRAFT)
  featured    Boolean     @default(false)
  metaTitle   String?
  metaDesc    String?
  image       String?
  readingTime Int?
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// CONTACT
model Contact {
  id        String        @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String        @db.Text
  status    ContactStatus @default(UNREAD)
  phone     String?
  company   String?
  website   String?
  read      Boolean?      @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  userId    String?
  user      User?         @relation(fields: [userId], references: [id])
}